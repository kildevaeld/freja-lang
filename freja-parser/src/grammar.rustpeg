use super::ast::*;
use super::{resolve_binary, resolve_logical, resolve_member};

pub program -> ProgramStmt
    = __ s:statements __ { ProgramStmt::new(s.into_iter().map(|m| Box::new(m)).collect()) }

statements -> Vec<Stmt>
    = s:(statement ** __) { s }

statement -> Stmt
    = block
    / class_decl
    / func_statement
    / return_stmt
    / var_statement
    / if_stmt
    / for_stmt
    / expression_statement

// Declarations

// Class
class_decl -> Stmt
    = token_class __ name:$identifier_raw
      __ extends:("extends" __ s:$identifier_raw { s.to_string() })?
      __ implements:("implements" __ i:((s:$identifier_raw { s.to_string() }) ++ (__ "," __)) { i })?
      __  "{" 
      __ body:(class_body ** __) __ "}" {
        Stmt::Class(ClassStmt::new(name.to_string(), body, extends, implements.unwrap_or(Vec::new())))
    }

class_body -> Box<Stmt>
    = s:func_statement { Box::new(s) }


/*interface_declartion -> Stmt {
    = token_interface __ name:$identifier_raw
      __ extends:("extends" __ s:$identifier_raw { s.to_string() })? 
      __ "{" 
      __ body:(interface_body ** __) __ "}" {
        Stmt::Interface(Interface::new(name.to_string(), body, extends))
    }
}

interface_body -> Stmt
    = s:func_declaration { Box::new(s) }

func_declaration -> Stmt {

}*/

// Function

func_statement -> Stmt
    = token_function __ name:$identifier_raw __
      "(" __ params:formal_parameter_list? __  ")"
      __ b:block __ {
          Stmt::Func(FuncStmt::new(name.to_string(), Box::new(b), params.unwrap_or(Vec::new())))
      }

formal_parameter_list -> Vec<Argument>
    = a:formal_parameter_item_vaargs { vec![a] }
    / args:(formal_parameter_item ** (__"," __)) __ rest:formal_parameter_item_vaargs? {
        let mut a = args;
        if rest.is_some() {
            a.push(rest.unwrap());
        }
        a
    }

formal_parameter_item -> Argument
    = o:$identifier_raw {  Argument::Regular(o.to_string()) }


formal_parameter_item_vaargs -> Argument
    = SPREAD_OPERATOR __ i:$identifier_raw { Argument::Rest(i.to_string()) }

// Return

return_stmt -> Stmt                 
    = token_return __ e:expression? { Stmt::Return(ReturnStmt::new(e))  }


expression_statement -> Stmt
    = _ e:expression { Stmt::Expr(ExprStmt::new(e)) }



var_statement -> Stmt
    = token_var __ vars:(var_decl ** (__ "," __)) {
        if vars.len() == 1 {
            Stmt::Var(vars.into_iter().nth(0).unwrap())
        } else {
            Stmt::VarList(VarListStmt::new(vars))
        }
    }

var_decl -> VarStmt
    = i:$identifier_raw __ init:initializer?  {
        VarStmt::new(i.to_string(), init)
    }

initializer -> Expr
    = "=" !"=" __ a:assignment_expr { a }

block -> Stmt
    = "{" __ s:statements __ "}" { Stmt::Block(BlockStmt::new(s.into_iter().map(|m| Box::new(m)).collect())) }

// Control flows

if_stmt -> Stmt
    = token_if __ test:expression __  b:block __ e:else_stmt? {
        Stmt::If(IfStmt::new(test, Box::new(b), e))
    }


else_stmt -> Box<Stmt>
    = token_else __  s:statement {
        Box::new(s)
    }


for_stmt -> Stmt 
    = token_for __ i:var_statement? __  c:(";" __  c:expression { c } )? __ o:(";" __   o:expression { o })? __ b:block {
        Stmt::For(ForStmt::new(i.map(|i| Box::new(i)),c,o,Box::new(b)))
    }

// Expressions

expression -> Expr
    = assignment_expr // (__s "," __s assignment_expr)*

assignment_expr -> Expr
    = l:left_hand_side __ o:assignment_operator __  r:assignment_expr {
        Expr::Assign(AssignExpr::new(Box::new(l),Box::new(r), o))
    } / logical_or_expr

left_hand_side -> Expr
    = call_expr / member_expr

call_expr -> Expr
    = m:member_expr a:arguments {
        Expr::Call(CallExpr::new(Box::new(m), a))
    }

 //( arguments / "[" expression "]" / "." identifier_name)* {

arguments -> Vec<Expr>
    = "(" __  a:((logical_or_expr) ** (__","__))? __ ")" { if a.is_some() { a.unwrap() } else { Vec::new() } }

// member_expr -> Expr
//     //= ( primary_expr /*/ function_expr*/ ) ( "[" expression "]" / "." identifier_name )*
//     = o:( primary_expr /*/ function_expr*/ ) p:( "[" e:expression "]" { e } / "." i:identifier { i } ) {
//         Expr::Member(MemberExpr::new(Box::new(o), Box::new(p), false))
//     }
//     / primary_expr

function_expr -> Expr
    =  "(" __ a:formal_parameter_list? __  ")"__ "=>" __ b:( expression_statement / block ) { 
        Expr::Closure(ClosureExpr::new(a.unwrap_or(Vec::new()), Box::new(b)))
    }

member_expr -> Expr
    = o:( primary_expr / function_expr ) 
      p:( "." i:identifier { i } )* {
        resolve_member(o, p)
    }
    

// member_expr -> Expr
//     = o:( primary_expr /*/ function_expr*/ ) 
//       p:( 
//             "[" e:expression "]" { e }
//             / "." ( i:identifier !"(" { i } / e:identifier a:arguments {
//                 Expr::Call(CallExpr::new(Box::new(e), a))
//             } 
//         ) )* {
//         resolve_member(o, p)
//     }
    


primary_expr -> Expr
    //= "this" / identifier / literal / "(" expression ")"
    = t:this { t } 
      / i:identifier { i }
      / l:literal { l }
      / "(" e:expression ")" { e }


this -> Expr
    =  token_this { Expr::This(ThisExpr::new()) } 


postfix_expr -> Expr
    = v:left_hand_side _ o:POSTFIX_OPERATOR __ { Expr::Postfix(PostfixExpr::new(Box::new(v),o)) }
    / left_hand_side

unary_expr -> Expr
    = o:UNARY_OPERATOR __ v:unary_expr __ { Expr::Unary(UnaryExpr::new(Box::new(v),o)) }
    / postfix_expr

multiplicative_expr -> Expr
    = l:unary_expr __ ops:(o:MULTIPLICATIVE_OPERATOR __ e:unary_expr __ { (o,e) } )* {
        resolve_binary(l, ops)
    }

additive_expr -> Expr
    = l:multiplicative_expr __ ops:(o:ADDITIVE_OPERATOR __ e:multiplicative_expr __ { (o, e) })* {
        resolve_binary(l, ops)
    }

shift_expr -> Expr
    = l:additive_expr __ ops:(o:SHIFT_OPERATOR __ r:additive_expr __ { (o,r) })* {
        resolve_binary(l, ops)
    }

relational_expr -> Expr
    = l:shift_expr __ ops:(o:RELATIONAL_OPERATOR __ r:shift_expr __ { (o,r) })* {
        resolve_binary(l, ops)
    }

equality_expr -> Expr
    = l:relational_expr __ ops:(o:EQUALITY_OPERATOR __ r:relational_expr __ { (o,r) })* {
        resolve_binary(l, ops)
    }

bitwise_and_expr -> Expr
    = l:equality_expr __ ops:(o:BITWISE_AND_OPERATOR __ r:equality_expr __ { (o,r) } )* {
        resolve_binary(l, ops)
    }

bitwise_xor_expr -> Expr
    = l:bitwise_and_expr __ ops:(o:BITWISE_XOR_OPERATOR __ r:bitwise_and_expr __ { (o,r) } )* {
        resolve_binary(l, ops)
    }

bitwise_or_expr -> Expr
    = l:bitwise_xor_expr __ ops:(o:BITWISE_OR_OPERATOR __ r:bitwise_xor_expr __ { (o,r) } )* {
        resolve_binary(l, ops)
    }

logical_and_expr -> Expr
    = l:bitwise_or_expr __ ops:(o:LOGICAL_AND_OPERATOR __ r:bitwise_or_expr __ { (o,r) })* {
        resolve_logical(l, ops)
    }

logical_or_expr -> Expr
    = l:logical_and_expr __ ops:(o:LOGICAL_OR_OPERATOR __ r:logical_and_expr __ { (o,r) })* {
        resolve_logical(l, ops)
    }


// Literals

literal -> Expr
    = lit:(
        literal_boolean
        / literal_number
        / literal_string
        / literal_array
        / literal_object
    ) { Expr::Literal(LiteralExpr::new(lit))  }


literal_boolean -> Literal
    = b:$("true" / "false") {
        Literal::Boolean(if b == "true" { true } else { false })
    }

// Literal Number

literal_number -> Literal
    =  n:(double / int) { Literal::Number(n) }

int -> Number
    = i:$("0" / [1-9] [0-9]*)  {
        Number::Integer(i.parse().unwrap())
    }

double -> Number
    =  i:$(("0" / [1-9] [0-9]*) "." [0-9]+) {
        Number::Double(i.parse().unwrap())
    }


// Literal String
literal_string -> Literal
    = "\"" s:$(raw_string / escape)* "\"" { Literal::String(s.to_string()) }

raw_string
    =  (!("\\" / "\"") . )+
hex
    =  [0-9] / [a-f] / [A-F]

unicode_hex
    =  hex*<1, 6>

predefined
    =  "n" / "r" / "t" / "\\" / "0" / "\"" / "'"

byte
    =  "x"  hex*<2>

unicode
    =  "u" "{" unicode_hex "}"

escape
    = "\\" (predefined / byte / unicode)

char_literal
    = "'" (escape / .) "'"


// Literal Array;
literal_array -> Literal
    = "[" __ e:(expression ** (__ "," __))  __ "]" {
        Literal::Array(e)
    }

literal_object -> Literal
    = "{" __ entries:((
        k:$identifier_raw __ ":" __ v:expression { 
            ObjectEntry::new(Expr::Literal(LiteralExpr::new(Literal::String(k.to_string()))), v)
        }
        / k:(literal_string / literal_number) __ ":" __ v:expression {
            ObjectEntry::new(Expr::Literal(LiteralExpr::new(k)), v)
        }
        / k:("[" __ e:expression __ "]" { e }) __ ":" __ v:expression {
            ObjectEntry::new(k, v)
        }
    ) ** (__ "," __)) (__ ",")? __ "}" {
        Literal::Object(Object::new(entries))
    }

// Tokens

token_this = "this"

token_function = "fn"

token_var = "let"

token_return = "return"

token_class = "class"

token_interface = "interface"

token_true = "true"

token_false = "false"

token_if = "if"

token_else = "else"

token_for = "for"

token_continue = "continue"

token_break = "break"

token_in = "in" !([a-zA-Z])

// Operators

POSTFIX_OPERATOR -> PostfixOperator
    = "++" { PostfixOperator::Increment } / "--" { PostfixOperator::Decrement }

UNARY_OPERATOR -> UnaryOperator
    = "++" { UnaryOperator::Increment }
      / "--" { UnaryOperator::Decrement }
      / "+" !"=" { UnaryOperator::Plus }
      / "-" !"=" { UnaryOperator::Minus }
      / "!" !"=" { UnaryOperator::Not }

ADDITIVE_OPERATOR -> BinaryOperator
    = "+" !("+" / "=") { BinaryOperator::Add }
      / "-" !("-" / "=") { BinaryOperator::Sub }

MULTIPLICATIVE_OPERATOR -> BinaryOperator
    = "*" !"=" { BinaryOperator::Mul }
      / "/" !"=" { BinaryOperator::Div }
      / "%" !"=" { BinaryOperator::Mod }

SHIFT_OPERATOR  -> BinaryOperator
    = "<<" !"=" { BinaryOperator::ShiftLeft } / ">>" !"=" { BinaryOperator::ShiftRight }

RELATIONAL_OPERATOR -> BinaryOperator
    = "<=" { BinaryOperator::Lte }
      / ">=" { BinaryOperator::Gte }
      / "<" !"<" { BinaryOperator::Lt }
      / ">" !">" { BinaryOperator::Gt }
      / "is" { BinaryOperator::Is }

EQUALITY_OPERATOR -> BinaryOperator
    = "==" { BinaryOperator::Eq } / "!=" { BinaryOperator::Neq }

LOGICAL_AND_OPERATOR -> LogicalOperator
    = "&&" { LogicalOperator::And }

LOGICAL_OR_OPERATOR -> LogicalOperator
    = "||" { LogicalOperator::Or }

assignment_operator -> AssignmentOperator
    = "*=" { AssignmentOperator::Mul }
    / "/=" { AssignmentOperator::Div }
    / "%=" { AssignmentOperator::Mod }
    / "+=" { AssignmentOperator::Add }
    / "-=" { AssignmentOperator::Sub }
    / "<<=" { AssignmentOperator::ShiftLeft }
    / ">>=" { AssignmentOperator::ShiftRight }
    / "&=" { AssignmentOperator::BitwiseAnd }
    / "^=" { AssignmentOperator::BitwiseXor }
    / "|=" { AssignmentOperator::BitwiseOr }
    / ("=" !"=") { AssignmentOperator::Assign }

// ">>>=" { AssignmentOperator::Mul }

BITWISE_AND_OPERATOR -> BinaryOperator
    = "&" !("&" / "=") { BinaryOperator::BitwiseAnd }
BITWISE_XOR_OPERATOR -> BinaryOperator
    = "^" !"=" { BinaryOperator::BitwiseXor }
BITWISE_OR_OPERATOR -> BinaryOperator
    = "|" !("|" / "=") { BinaryOperator::BitwiseOr }

SPREAD_OPERATOR             = "..."


reserved_words
    = token_this / token_function / token_var / token_return / token_class
      / token_true / token_false / token_if / token_else / token_for / token_continue
      / token_break / token_in


identifier -> Expr
    = i:$(!reserved_words identifier_name) { Expr::Identifier(IdentifierExpr::new(i.to_string())) }

identifier_raw
    = !reserved_words identifier_name

identifier_name
    = [a-zA-Z_] [a-zA-Z0-9_]*


// Utils

whitespace
    =  "\t" / "\\v" / "\\f" / " " / "\u{00A0}" / "\u{FEFF}"

source_character
    = .

line_terminator
    =  "\n" / "\r" / "\u{2028}" / "\u{2029}"

line_terminator_sequence
    =  "\n" / "\r\n" / "\r" / "\u{2028}" / "\u{2029}"

comment = multi_line_comment / single_line_comment

multi_line_comment = "/*" (!"*/" source_character)* "*/"

multi_line_comment_no_line_terminator = "/*" (!("*/" / line_terminator) source_character)* "*/"

single_line_comment = "//" (!line_terminator source_character)*

_ = whitespace*

__ = (whitespace / line_terminator_sequence / comment )*

__c = (whitespace / line_terminator_sequence / multi_line_comment / multi_line_comment_no_line_terminator / ";" )+

/*_s = ("\n" / ";") _

__s = (whitespace / line_terminator_sequence )**/


EOS =  single_line_comment? line_terminator_sequence / _ ";" _ / _ &"}" / !.
