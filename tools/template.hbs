use std::fmt;

#[derive(Serialize, Debug, Clone, PartialEq, Eq, Hash, Deserialize)]
pub struct Location(pub usize, pub usize);

#[derive(Serialize, Debug, Clone, PartialEq, Eq, Hash, Deserialize)]
pub enum TokenType {
    This, Identifier,
    OpAdditive, OpMultiplicative
}

#[derive(Serialize, Debug, PartialEq, Eq, Hash, Clone)]
#[serde(tag = "type")]
pub struct Token<'a> {
    pub kind: TokenType,
    pub location: Location,
    pub value: &'a str,
}

impl<'a> Token<'a> {
    pub fn new(location: Location, kind: TokenType, value: &'a str) -> Token<'a> {
        Token { location, value, kind }
    }
}

impl<'a> fmt::Display for Token<'a> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.value)
    }
}

{{#each enums}}
{{#if visitor}}
pub trait {{name}}Visitor<R> {
    {{#each variants}}
    fn visit_{{lower name}}_{{lower ../name}}(&mut self, e:&{{name}}{{../name}}) -> R;
    {{/each}}
}

{{/if}}
{{/each}}

{{#each enums }}
#[derive(Serialize, Debug, Clone, PartialEq)]
{{#if flatten}}
#[serde(tag = "type")]
{{else}}
#[serde(tag = "type", content = "value")]
{{/if}}
pub enum {{{name}}}<'a> {
    {{#each variants}}
    {{{name}}}{{#if value}}({{{value}}}){{/if}},
    {{/each}}
}
{{#if visitor}}

impl<'a> {{{name}}}<'a> {
    pub fn accept<R>(&self, visitor: &mut {{name}}Visitor<R>) -> R {
        match self {
            {{#each visitor}}
            {{{../name}}}::{{this}}(s) => visitor.visit_{{lower this}}_{{lower ../name}}(&s),
            {{/each}}
        }
    }
}
{{/if}}

{{/each}}

{{#each structures}}
#[derive(Serialize, Debug, Clone, PartialEq)]
pub struct {{{name}}}{{#if fields.length}}<'a>{{/if}} {
    pub location: Location,
    {{#each fields}}
    pub {{{name}}}: {{{value}}},
    {{/each}}
}

{{/each}}