use std::fmt;

#[cfg_attr(feature = "serde_support", derive(Serialize, Deserialize))]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Location(pub usize, pub usize);

#[cfg_attr(feature = "serde_support", derive(Serialize, Deserialize))]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum TokenType {
    This, Identifier,
    OpAdditive, OpMultiplicative,
    ShiftOperator, EqualityOperator, RelationalOperator,
    BitwiseOrOperator, BitwiseAndOperator,
    LogicalOrOperator, LogicalAndOperator
}
#[cfg_attr(feature = "serde_support", derive(Serialize, Deserialize))]
#[derive(Debug, PartialEq, Eq, Hash, Clone)]
#[cfg_attr(feature = "serde_support", serde(tag = "type"))]
pub struct Token {
    pub kind: TokenType,
    pub location: Location,
    pub value: String,
}

impl Token {
    pub fn new(location: Location, kind: TokenType, value: &str) -> Token {
        Token { location, value: value.to_owned(), kind }
    }
}

impl fmt::Display for Token {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.value)
    }
}



{{#each enums}}
{{#if visitor}}
pub trait {{name}}Visitor<R> {
    {{#each variants}}
    fn visit_{{lower name}}_{{lower ../name}}(&mut self, e:&{{name}}{{../name}}) -> R;
    {{/each}}
}

{{/if}}
{{/each}}

{{#each enums }}
#[cfg_attr(feature = "serde_support", derive(Serialize, Deserialize))]
#[derive(Debug, Clone, PartialEq)]
{{#if flatten}}
#[cfg_attr(feature = "serde_support", serde(tag = "type"))]
{{else}}
// #[serde(tag = "type", content = "value")]
#[cfg_attr(feature = "serde_support", serde(tag = "type", content = "value"))]
{{/if}}
pub enum {{{name}}} {
    {{#each variants}}
    {{{name}}}{{#if value}}({{{value}}}){{/if}},
    {{/each}}
}
{{#if visitor}}

impl {{{name}}} {
    pub fn accept<R>(&self, visitor: &mut {{name}}Visitor<R>) -> R {
        match self {
            {{#each visitor}}
            {{{../name}}}::{{this}}(s) => visitor.visit_{{lower this}}_{{lower ../name}}(&s),
            {{/each}}
        }
    }
}
{{/if}}

{{/each}}

{{#each structures}}
#[cfg_attr(feature = "serde_support", derive(Serialize, Deserialize))]
#[derive(Debug, Clone, PartialEq)]
pub struct {{{name}}}{{#if fields.length}}{{/if}} {
    {{!-- pub location: Location, --}}
    {{#each fields}}
    pub {{{name}}}: {{{value}}},
    {{/each}}
}

impl {{{name}}} {
    pub fn new(
        {{!-- location: Location, --}}
        {{#each fields}}{{{name}}}: {{{value}}},
        {{/each}}) -> {{{name}}} {
        {{{name}}} {
            {{!-- location, --}}
            {{#each fields}}{{{name}}},
            {{/each}}
        }
    }
}

{{/each}}
